@use "sass:math";
@use "sass:map";
@use "colors";
@use "geometry";

// Основной блок
:host {
  display: block;
}

// Лоадер
.loader {
  $leafsCount: 20;
  $loaderSize: 100%;
  $circleSize: 25%;
  $leafSpacing: 4%;
  $leafCornerRadius: 10%;
  $leafHeight: math.div($loaderSize - $circleSize - ($leafSpacing * 2), 2);
  $leafWidth: geometry.hypotenuse(math.div($leafHeight, 2));
  $loaderColor: #000;
  $loaderColorA: $loaderColor;
  $loaderColorB: colors.darker($loaderColorA, 3);
  $speed: 5s;
  $loaderColors: (
    primary: map.get(colors.$matPrimary, 500),
    accent: map.get(colors.$matSecondary, 500),
    warn: map.get(colors.$matStatusWarn, 500),
    disabled: map.get(colors.$matDisabled, 500),
    whiteColor: #fff
  );
  // Свойства
  position: relative;
  width: $loaderSize;
  height: $loaderSize;
  padding: math.div($loaderSize - $circleSize, 2);
  // Круг по середине
  &__circle {
    width: $loaderSize;
    height: $loaderSize;
    border-radius: 50%;
  }
  // Лепестки
  &__leaf {
    $topPosition: math.div($leafHeight - $leafWidth, 2);
    $topTransformOrigin: math.div($leafWidth + $topPosition + $leafSpacing + math.div($circleSize, 2), $leafWidth) * 100%;
    $radius: 50%;
    $leafCornerCat: geometry.cathetus($radius);
    $leafCornerHyp: geometry.hypotenuse($radius);
    $leafCornerPosition: $radius - $leafCornerCat - math.div($radius, 2);
    // Свойства
    position: absolute;
    top: $topPosition;
    left: math.div($loaderSize - $leafWidth, 2);
    width: $leafWidth;
    height: $leafWidth;
    border-radius: 50%;
    transform-origin: 50% #{$topTransformOrigin};
    // Уголки
    &::before,
    &::after {
      content: "";
      display: block;
      position: absolute;
      width: $radius;
      height: $radius;
      left: math.div(100% - $radius, 2);
      transform: rotate(45deg);
      mix-blend-mode: inherit;
      border-radius: $leafCornerRadius;
    }
    // Верхний
    &::before {
      top: $leafCornerPosition;
    }
    // Нижний
    &::after {
      bottom: $leafCornerPosition;
    }
    // Анимация
    &:nth-child(odd) {
      animation: loaderAnimation #{$speed} linear infinite;
      z-index: 2;
    }
    // Анимация
    &:nth-child(even) {
      animation: loaderAnimation #{$speed * 0.7} linear infinite;
      z-index: 1;
    }
  }
  // Разное количество лепестков
  @for $leafCount from 1 through $leafsCount {
    $leafsAngle: math.div(360deg, $leafCount);
    // Свойства
    &[leafs="#{$leafCount}"] &__leaf {
      @for $i from 1 through $leafCount {
        $angle: $leafsAngle * ($i - 1);
        // Свойства
        &:nth-of-type(#{$i}) {
          transform: rotate(#{$angle});
        }
      }
    }
  }
  // Цвета
  @each $colorName, $loaderColor in $loaderColors {
    &[color="#{$colorName}"] & {
      $invertLoaderColor: colors.darker($loaderColor, 4);
      // Круг по середине
      &__circle {
        background-color: $loaderColor;
      }
      // Лепестки
      &__leaf {
        // Анимация
        &:nth-child(odd) {
          background-color: $loaderColor;
          // Верхний
          &::before,
          &::after {
            background-color: $loaderColor;
          }
        }
        // Анимация
        &:nth-child(even) {
          background-color: $invertLoaderColor;
          // Верхний
          &::before,
          &::after {
            background-color: $invertLoaderColor;
          }
        }
      }
    }
  }
}

// Анимация
@keyframes loaderAnimation {
  0% {
    rotate: 0deg;
  }
  100% {
    rotate: 360deg;
  }
}
