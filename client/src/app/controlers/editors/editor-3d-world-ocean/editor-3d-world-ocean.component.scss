@use "sass:math";
@use "sass:map";
@use "mixins";
@use "colors";
@use "containers";
@use "screens";

$mainControlSize: 90px;
$controlSize: $mainControlSize * 4;
$lineSize: 1px;
$oceanOutSpacing: 6px;
$oceanHeight: 2px;
$rulerSpacing: 16px;
$largeSerifWidth: 12px;
$serifWidth: 6px;
$rulerWidth: math.max($largeSerifWidth, $serifWidth);
$subControlSize: containers.$avatarSize;
// Свойства линий (в процентах)
$lines: (
  0: (
    width: 8,
    height: 1
  ),
  1: (
    width: 10,
    height: 32
  ),
  2: (
    width: 18,
    height: 18
  ),
  3: (
    width: 32,
    height: 2
  ),
  4: (
    width: 11,
    height: 24
  ),
  5: (
    width: 3,
    height: -6
  ),
  6: (
    width: 13,
    height: 29
  ),
  7: (
    width: 5,
    height: -9
  )
);

// Настройки времени
.settings {
  $lineXItterator: 0;
  $lineYItterator: 0;
  // Свойства
  display: flex;
  position: relative;
  flex-direction: row;
  justify-content: flex-start;
  align-items: flex-start;
  gap: $rulerSpacing;
  // Имитация ландшафта
  &__landscape {
    position: relative;
    display: block;
    width: $controlSize;
    height: $controlSize;
    // Общие свойства линий
    &-line {
      position: absolute;
      display: block;
      height: $lineSize;
      background-color: colors.$titleDark;
      transform-origin: 0 50%;
    }
    // Линии
    @each $index, $line in $lines {
      &-line-#{$index} {
        $boxWidth: map.get($line, width);
        $boxHeight: map.get($line, height);
        $width: math.sqrt(math.pow($boxWidth, 2) + math.pow($boxHeight, 2));
        $rotate: math.atan(math.div($boxHeight, $boxWidth));
        // Свойства
        left: mixins.decimalToPercent($lineXItterator);
        bottom: mixins.decimalToPercent($lineYItterator);
        width: mixins.decimalToPercent($width);
        transform: rotate(-$rotate);
        // Обновить переменные
        $lineXItterator: $lineXItterator + $boxWidth;
        $lineYItterator: $lineYItterator + $boxHeight;
      }
    }
  }
  // Иммитация океана
  &__ocean {
    $spacings: ($rulerWidth + $rulerSpacing) - $oceanOutSpacing;
    // Свойства
    position: absolute;
    left: $spacings;
    width: calc(100% - #{$spacings * 2});
    height: $oceanHeight;
    margin-bottom: math.div($oceanHeight, -2);
    border-radius: math.div($oceanHeight, 2);
    background-color: colors.$titleDark;
  }
  // Линейка
  &__ruler {
    position: relative;
    display: block;
    width: $rulerWidth;
    height: ($controlSize - $lineSize);
    border: 0 dotted #{colors.$titleDark};
    border-right-width: $lineSize;
    // Засечки
    &-serif {
      position: absolute;
      display: block;
      width: $serifWidth;
      height: $lineSize;
      background-color: colors.$titleDark;
      right: -$lineSize;
      // Широкие засечки
      &.large {
        width: $largeSerifWidth;
      }
      // Линейка справа
      &.right {
        right: auto;
        left: -$lineSize;
      }
    }
    // Линейка справа
    &.right {
      border-left-width: $lineSize;
      border-right-width: 0;
    }
  }
  // Кнопка
  &__button {
    position: absolute;
    margin-top: math.div(-$subControlSize, 2);
    left: -#{$subControlSize + $rulerSpacing};
    cursor: pointer;
    z-index: 2;
    background-color: colors.$titleDark;
    color: colors.$title;
    border-radius: 50%;
    text-align: center;
    transition:
      background-color #{screens.$animationTime},
      color #{screens.$animationTime};
    // Общий стиль
    &,
    > mat-icon {
      user-select: none;
      width: $subControlSize;
      height: $subControlSize;
      line-height: $subControlSize;
    }
    // Иконка
    > mat-icon {
      pointer-events: none;
      font-size: $subControlSize * 0.7;
    }
    // Выделение
    &:hover {
      background-color: map.get(colors.$matPrimary, 500);
      color: map.get(colors.$matPrimary, contrast, 500);
    }
    // Правая кнопка
    &.right {
      left: auto;
      right: -#{$subControlSize + $rulerSpacing};
    }
  }
}
