@use "sass:map";
@use "sass:math";
@use "../../../assets/styles/screens";
@use "../../../assets/styles/containers";
@use "../../../assets/styles/vars";

// Блок информации
.information {
  $__elm: &;
  $mainAvatarSizes: (
    default: 20%,
    large: 25%,
    middle: 30%,
    small: 100%,
    xsmall: 100%,
  );
  $columnTemplates: (
    default: true,
    small: false,
    xsmall: false,
  );
  $columnItems: "status" "general" "actions" "dreams" "avatar" "friends-friends" "friends-subscribers" "friends-subscribe" "comments";
  $rightColumnData: (
    default: (
      areas: "status" "actions" "general" "dreams" "comments",
      noActionsAreas: "status" "general" "dreams" "comments",
      columns: repeat(1, minmax(1px, 1fr)),
    ),
    xlarge: (
      areas: "status status status" "actions general general" "dreams dreams dreams" "comments comments comments",
      noActionsAreas: "status status status" "general general empty" "dreams dreams dreams" "comments comments comments",
      columns: repeat(3, minmax(1px, 1fr)),
    ),
  );
  // Свойства
  display: grid;
  align-items: start;
  // Колонки
  &__left,
  &__right {
    &,
    &-helper {
      @each $item in $columnItems {
        > #{"." + $item} {
          grid-area: #{$item};
        }
      }
    }
  }
  // Левая колонка
  &__left {
    position: relative;
    height: 100%;
    // Помощник
    &-helper {
      position: sticky;
      bottom: 0;
      // Адаптив
      @include screens.adaptive(small, small) {
        $gap: map.get(vars.$userProfileBlocksGaps, small);
        // Свойства
        position: static;
        display: grid;
        grid-template-columns: 43% minmax(1px, 1fr);
        grid-template-areas: "avatar friends-friends" "avatar friends-subscribers" "avatar friends-subscribe" "avatar empty";
        grid-gap: $gap;
        // Убрать отступы
        ::ng-deep & > friends-block > .block {
          margin-top: 0;
        }
      }
    }
    // Адаптив
    @include screens.adaptiveFor($mainAvatarSizes, $columnTemplates, containers.$cardPaddings) using($mainAvatarSize, $column, $cardPadding) {
      // Сброс колонок
      @if ($column == false) {
        margin: 0 auto;
        width: $mainAvatarSize;
      }
      // Помощник
      &-helper {
        top: vars.$headerHeight + map.get($cardPadding, y);
        bottom: map.get($cardPadding, y);
      }
    }
  }
  // Правая колонка
  &__right {
    display: grid;
    align-items: start;
    // Адаптив
    @include screens.adaptiveFor(vars.$userProfileBlocksGaps, $rightColumnData) using($gap, $data) {
      width: calc(100% + #{$gap});
      margin-top: -$gap;
      margin-right: -$gap;
      grid-template-columns: map.get($data, columns);
      grid-template-areas: map.get($data, areas);
      // Без блока действий
      &.noActions {
        grid-template-areas: map.get($data, noActionsAreas);
      }
      // Потомки
      @each $item in $columnItems {
        > #{"." + $item} {
          margin-top: $gap;
          margin-right: $gap;
        }
      }
    }
  }
  // Адаптив
  @include screens.adaptiveFor($mainAvatarSizes, vars.$userProfileBlocksGaps, $columnTemplates) using($mainAvatarSize, $gap, $column) {
    grid-gap: $gap;
    // Горизонтальные колонки
    @if ($column == true) {
      grid-template-columns: #{$mainAvatarSize} minmax(1px, 1fr);
    }
    // Сброс колонок
    @else {
      grid-template-columns: 1fr;
      justify-content: center;
    }
  }
}
